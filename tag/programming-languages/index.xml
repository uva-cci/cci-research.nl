<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming languages | Complex Cyber-Infrastructures (CCI)</title><link>https://cci-research.nl/tag/programming-languages/</link><atom:link href="https://cci-research.nl/tag/programming-languages/index.xml" rel="self" type="application/rss+xml"/><description>Programming languages</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 20 Sep 2022 00:00:00 +0000</lastBuildDate><image><url>https://cci-research.nl/images/logo_hu5a1000236f6e181a977795e6532452c2_304385_300x300_fit_lanczos_2.png</url><title>Programming languages</title><link>https://cci-research.nl/tag/programming-languages/</link></image><item><title>Paper Accepted @SLE22</title><link>https://cci-research.nl/post/paper-accepted-at-sle22/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/paper-accepted-at-sle22/</guid><description>&lt;p>The paper titled &lt;strong>iCoLa: A Compositional Meta-language with Support for Incremental Language Development&lt;/strong>
by Damian Frolich and Thomas van Binsbergen is accepted at the &lt;a href="https://2022.splashcon.org/home/sle-2022" target="_blank" rel="noopener">15th edition of the Software Language Engineering (SLE)&lt;/a> conference.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Programming languages providing high-level abstractions can increase programming productivity and safety. Language-oriented programming is a paradigm in which specialized languages are developed to solve problems within specific domains with (high-level) abstractions relevant to those domains. However, language development involves complex design and engineering processes. These processes can be simplified by reusing (parts of) existing languages and by offering language-parametric tooling. In this paper we present iCoLa, a meta-language supporting incremental (meta-)programming based on reusable components. In our implementation of iCoLa, languages are first-class citizens, providing the full power of the host-language (Haskell) to compose and manipulate languages. Finally, we demonstrate iCoLa through a case-study in which we construct &lt;em>Imp&lt;/em>, &lt;em>SIMPLE&lt;/em>, and &lt;em>MiniJava&lt;/em> through the composition and restriction of language fragments and demonstrate the variability of our approach through the construction of several languages using a fixed-set of operators.&lt;/p></description></item></channel></rss>