<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming languages | Complex Cyber-Infrastructures (CCI)</title><link>https://cci-research.nl/tag/programming-languages/</link><atom:link href="https://cci-research.nl/tag/programming-languages/index.xml" rel="self" type="application/rss+xml"/><description>Programming languages</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 08 Feb 2024 00:00:00 +0000</lastBuildDate><image><url>https://cci-research.nl/images/logo_hu5a1000236f6e181a977795e6532452c2_304385_300x300_fit_lanczos_2.png</url><title>Programming languages</title><link>https://cci-research.nl/tag/programming-languages/</link></image><item><title>Paper Accepted @JSS</title><link>https://cci-research.nl/post/paper-accepted-at-jss24-02/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/paper-accepted-at-jss24-02/</guid><description>&lt;p>The paper titled &lt;strong>iCoLa+: An extensible meta-language with support for exploratory language development&lt;/strong>
by Damian Frolich and L. Thomas van Binsbergen
is accepted by the &lt;a href="https://www.sciencedirect.com/science/article/pii/S0164121224000220?via%3Dihub" target="_blank" rel="noopener">Journal of Systems and Software&lt;/a>.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Programming languages providing high-level abstractions can increase a programmers’ productivity and the safety of a program. Language-oriented programming is a paradigm in which domain-specific languages are developed to solve problems within specific domains with (high-level) abstractions relevant to those domains. However, language development involves complex design and engineering processes. These processes can be simplified by reusing (parts of) existing languages and by offering language-parametric tooling.&lt;/p>
&lt;p>In this paper we present &lt;em>iCoLa+&lt;/em>, an extensible meta-language implemented in Haskell supporting incremental (meta-)programming based on reusable components. We demonstrate &lt;em>iCoLa+&lt;/em> through the construction of the Imp, SIMPLE, and MiniJava languages via the composition and restriction of language fragments, demonstrate the variability of our approach through the construction of several languages using a fixed-set of operators, and demonstrate the different forms of extensions possible in &lt;em>iCoLa+&lt;/em>.&lt;/p></description></item><item><title>Paper Accepted @SLE23</title><link>https://cci-research.nl/post/paper-accepted-at-sle23/</link><pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/paper-accepted-at-sle23/</guid><description>&lt;p>The paper titled &lt;strong>Adaptive Structural Operational Semantics&lt;/strong>
by Gwendal Jouneaux (Univ. Rennes, Inria, IRISA); Damian Frolich (University of Amsterdam);
Olivier Barais (Univ. Rennes, Inria, CNRS, IRISA); Benoit Combemale (Univ. Rennes, Inria, IRISA);
Gurvan Le Guernic (DGA Maîtrise de l’Information, Univ. Rennes, Inria, IRISA); Gunter Mussbacher (McGill University, Inria);
L. Thomas van Binsbergen (University of Amsterdam)
is accepted at the &lt;a href="https://2023.splashcon.org/home/sle-2023" target="_blank" rel="noopener">16th edition of the Software Language Engineering (SLE)&lt;/a> conference.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Software systems evolve more and more in complex and changing environments, often requiring runtime adaptation
to best deliver their services. When self-adaptation is the
main concern of the system, a manual implementation of
the underlying feedback loop and trade-off analysis may be
desirable. However, the required expertise and substantial development effort make such implementations prohibitively
difficult when it is only a secondary concern for the given
domain. In this paper, we present ASOS, a metalanguage abstracting the runtime adaptation concern of a given domain
in the behavioral semantics of a domain-specific language
(DSL), freeing the language user from implementing it from
scratch for each system in the domain. We demonstrate our
approach on RobLANG, a procedural DSL for robotics, where
we abstract a recurrent energy-saving behavior depending
on the context. We provide formal semantics for ASOS and
pave the way for checking properties such as determinism,
completeness, and termination of the resulting self-adaptable
language. We provide first results on the performance of our
approach compared to a manual implementation of this self-
adaptable behavior. We demonstrate, for RobLANG, that our
approach provides suitable abstractions for specifying sound
adaptive operational semantics while being more efficient.&lt;/p></description></item><item><title>Just happened: Programming Languages in the Netherlands (PLNL) 2023</title><link>https://cci-research.nl/post/plnl-2023/</link><pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/plnl-2023/</guid><description>&lt;p>The workshop Programming Languages in the Netherlands, supported by &lt;a href="https://versen.nl" target="_blank" rel="noopener">VERSEN&lt;/a>, was a big success. A 12-presentation programme enticed plenty of discussion amoung the 50-60 participants. The CCI group contributed by organising the event (Thomas and Grace) and by giving two talks (Christopher on Seaso and Damian on language services).&lt;/p>
&lt;p>Many thanks to Grace for the help in organising the event, resulting in a very smooth workshop experience. The attached pictures give an impression of the event hosted in the Doelenzaal of the university library.&lt;/p>
&lt;p>PLNL is still looking for organisers for next year.&lt;/p>
&lt;p>&lt;img src="crowd.jpg" alt="PLNL2023">&lt;/p></description></item><item><title>Another Paper Accepted @SLE22</title><link>https://cci-research.nl/post/second-paper-accepted-at-sle22/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/second-paper-accepted-at-sle22/</guid><description>&lt;p>The CCI group is well presented at the &lt;a href="https://2022.splashcon.org/home/sle-2022" target="_blank" rel="noopener">15th edition of the Software Language Engineering (SLE)&lt;/a> with
another paper being accepted, titled: &lt;strong>A Language-Parametric Approach to Exploratory Programming Environments&lt;/strong>
by Thomas van Binsbergen, Damian Frolich, Mauricio Verano Merino, Joey Lai, Pierre Jeanjean, Tijs van der Storm, Benoit Combemale, and Olivier Barais.
This paper is a collaboration with the &lt;a href="https://www.diverse-team.fr/" target="_blank" rel="noopener">DiverSE team from Inria&lt;/a> and the &lt;a href="https://www.cwi.nl/research/groups/software-analysis-and-transformation" target="_blank" rel="noopener">CWI SWAT group&lt;/a>, and a significant contribution from a &lt;a href="https://scripties.uba.uva.nl/search?id=record_30195" target="_blank" rel="noopener">master&amp;rsquo;s thesis&lt;/a> done at the CCI group.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Exploratory programming is a software development style in which code is a medium for prototyping ideas and solutions, and in which even the end-goal can evolve over time. Exploratory programming is valuable in various contexts such as programming education, data science, and end-user programming. However, there is a lack of appropriate tooling and language design principles to support exploratory programming. This paper presents a host language- and object language-independent protocol for exploratory programming akin to the Language Server Protocol. The protocol serves as a basis to develop novel (or extend existing) programming environments for exploratory programming such as computational notebooks and command-line REPLs. An architecture is presented on top of which prototype environments can be developed with relative ease, because existing (language) components can be reused. Our prototypes demonstrate that the proposed protocol is sufficiently expressive to support exploratory programming scenarios as encountered in literature within the software engineering, human-computer interaction and data science domains.&lt;/p></description></item><item><title>Paper Accepted @SLE22</title><link>https://cci-research.nl/post/paper-accepted-at-sle22/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://cci-research.nl/post/paper-accepted-at-sle22/</guid><description>&lt;p>The paper titled &lt;strong>iCoLa: A Compositional Meta-language with Support for Incremental Language Development&lt;/strong>
by Damian Frolich and Thomas van Binsbergen is accepted at the &lt;a href="https://2022.splashcon.org/home/sle-2022" target="_blank" rel="noopener">15th edition of the Software Language Engineering (SLE)&lt;/a> conference.&lt;/p>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>Programming languages providing high-level abstractions can increase programming productivity and safety. Language-oriented programming is a paradigm in which specialized languages are developed to solve problems within specific domains with (high-level) abstractions relevant to those domains. However, language development involves complex design and engineering processes. These processes can be simplified by reusing (parts of) existing languages and by offering language-parametric tooling. In this paper we present iCoLa, a meta-language supporting incremental (meta-)programming based on reusable components. In our implementation of iCoLa, languages are first-class citizens, providing the full power of the host-language (Haskell) to compose and manipulate languages. Finally, we demonstrate iCoLa through a case-study in which we construct &lt;em>Imp&lt;/em>, &lt;em>SIMPLE&lt;/em>, and &lt;em>MiniJava&lt;/em> through the composition and restriction of language fragments and demonstrate the variability of our approach through the construction of several languages using a fixed-set of operators.&lt;/p></description></item></channel></rss>